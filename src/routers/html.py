"""HTML."""

import inspect

from fastapi import APIRouter, Request
from fastapi.responses import FileResponse, HTMLResponse
from opentelemetry import trace

from config.main import APP_CONFIG
from database import DB
from models.ajax import Ajax
from templates.index import Index
from templates.usage_point import UsagePoint

ROUTER = APIRouter(tags=["HTML"], include_in_schema=False)


@ROUTER.get("/favicon.ico")
async def favicon():
    """This function handles the endpoint '/favicon.ico' and returns the favicon.ico file as a response.

    Returns:
    - FileResponse: The favicon.ico file as a response.
    """
    with APP_CONFIG.tracer.start_as_current_span(f"{__name__}.{inspect.currentframe().f_code.co_name}"):
        return FileResponse(f"{APP_CONFIG.application_path}/static/favicon.ico")


@ROUTER.get("/", response_class=HTMLResponse)
def main():
    """Handle the root endpoint '/' and return the HTML generated by the 'display' method of the 'Index' class.

    Returns:
    - HTMLResponse: The HTML response generated by the 'display' method of the 'Index' class.
    """
    return Index(DB).display()


@ROUTER.get("/usage_point_id/{usage_point_id}", response_class=HTMLResponse)
@ROUTER.get("/usage_point_id/{usage_point_id}/", response_class=HTMLResponse)
def usage_point_id(usage_point_id):
    """Handle the endpoint '/usage_point_id/{usage_point_id}' and '/usage_point_id/{usage_point_id}/'.

    Parameters:
    - usage_point_id (str): The ID of the usage point.

    Returns:
    - HTMLResponse: The HTML response generated by the 'display' method of the 'UsagePoint' class.
    """
    with APP_CONFIG.tracer.start_as_current_span(f"{__name__}.{inspect.currentframe().f_code.co_name}"):
        trace.get_current_span().set_attribute("usage_point_id", usage_point_id)
        return UsagePoint(usage_point_id).display()


@ROUTER.get("/datatable/{usage_point_id}/{measurement_direction}")
@ROUTER.get("/datatable/{usage_point_id}/{measurement_direction}/")
def datatable(request: Request, usage_point_id, measurement_direction):
    """Get datatable for a specific usage point and measurement direction.

    Parameters:
    - request (Request): The FastAPI request object.
    - usage_point_id (str): The ID of the usage point.
    - measurement_direction (str): The measurement direction (e.g., consumption, production).

    Returns:
    - The datatable for the specified usage point and measurement direction.

    Example:
        datatable(request, "usage_point_id", "measurement_direction")
    """
    with APP_CONFIG.tracer.start_as_current_span(f"{__name__}.{inspect.currentframe().f_code.co_name}"):
        trace.get_current_span().set_attribute("usage_point_id", usage_point_id)
        trace.get_current_span().set_attribute("measurement_direction", measurement_direction)
        return Ajax(usage_point_id).datatable(measurement_direction, request)
